
"use strict"








var transitions = (keyset, state) => {

	var out = { }

	try {
		keyset.forEach(key => out[key] = state)
	} catch (err) {
		throw Error(`${state}: ${err.message}`)
	}

	return out

}

var Enum = states => {

	var out = { }

	// -- todo add undefined lookup cloberrer.
	states.forEach((state, ith) => {
		out[state] = state
	})

	return out

}




var states = Enum([

	'TYPE',
	'OPERATOR',

	'WHITESPACE',
	'PSEUDOCLASS_OPEN',
	'PSEUDOCLASS',

	'PSEUDOCLASS_ARGUMENTS_OPEN',

	'PSEUDOCLASS_ARGUMENT_STRING_OPEN',
	'PSEUDOCLASS_ARGUMENT_STRING',
	'PSEUDOCLASS_ARGUMENT_STRING_CLOSE',

	'PSEUDOCLASS_ARGUMENT_SEPERATOR',

	'PSEUDOCLASS_ARGUMENTS_CLOSE',

	'ATTRIBUTE_OPEN',

	'ATTRIBUTE_KEY',

	'ATTRIBUTE_STRING_OPEN',
	'ATTRIBUTE_STRING',
	'ATTRIBUTE_STRING_CLOSE',

	'ATTRIBUTE_CLOSE',

	'RULE_SEPERATOR'

])





var charset = {
	lowerCaseLetters: 'abcdefghijklmnopqrstuvwxyz',
	upperCaseLetters: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
	mixedCaseLetters: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',

	colon:             ':',
	numbers:           '0123456789',
	whitespace:        ' 	',
	hypen:             '-',
	operators:         '>+=~',

	comma:             ',',

	openBracket:       '[',
	closeBracket:      ']',

	openRoundBracket:  '(',
	closeRoundBracket: ')',

	doubleString:      '"'
}


Object.keys(charset).forEach(key => {
	charset[key] = charset[key].split('')
})

charset.anyToken         = ['__DEFAULT__']





var grammar = {

	/*
		The Type state denotes a typed segment of the code's parse
		tree; for example function, literal, ...
	*/

	[states.TYPE]: Object.assign(
		{ },

		transitions(
			charset.mixedCaseLetters,
			states.TYPE),

		transitions(
			charset.whitespace,
			states.WHITESPACE),

		transitions(
			charset.colon,
			states.PSEUDOCLASS_OPEN),

		transitions(
			charset.openBracket,
			states.ATTRIBUTE_OPEN)

	),

	/*

	*/

	[states.ATTRIBUTE_OPEN]: Object.assign(
		{ },

		transitions(
			charset.mixedCaseLetters,
			states.ATTRIBUTE_KEY)

	),

	/*

	*/

	[states.ATTRIBUTE_KEY]: Object.assign(
		{ },

		transitions(
			charset.mixedCaseLetters,
			states.ATTRIBUTE_KEY),

		transitions(
			charset.operators,
			states.OPERATOR)

	),

	/*

	*/

	[states.OPERATOR]: Object.assign(
		{ },

		transitions(
			charset.whitespace,
			states.WHITESPACE),

		transitions(
			charset.mixedCaseLetters,
			states.TYPE),

		transitions(
			charset.doubleString,
			states.ATTRIBUTE_STRING_OPEN)

	),

	/*

	*/

	[states.ATTRIBUTE_STRING_OPEN]: Object.assign(
		{ },

		transitions(
			charset.doubleString,
			states.ATTRIBUTE_STRING_CLOSE),

		transitions(
			charset.anyToken,
			states.ATTRIBUTE_STRING)

	),

	/*

	*/

	[states.ATTRIBUTE_STRING]: Object.assign(
		{ },

		transitions(
			charset.doubleString,
			states.ATTRIBUTE_STRING_CLOSE),

		transitions(
			charset.anyToken,
			states.ATTRIBUTE_STRING)

	),

	/*

	*/

	[states.ATTRIBUTE_STRING_CLOSE]: Object.assign(
		{ },

		transitions(
			charset.closeBracket,
			states.ATTRIBUTE_CLOSE)

	),

	/*

	*/

	[states.ATTRIBUTE_CLOSE]: Object.assign(
		{ },

		transitions(
			charset.comma,
			states.RULE_SEPERATOR)

	),

	[states.PSEUDOCLASS_OPEN]: Object.assign(
		{ },

		transitions(
			charset.mixedCaseLetters,
			states.PSEUDOCLASS)

	),

	[states.PSEUDOCLASS]: Object.assign(
		{ },

		transitions(
			charset.mixedCaseLetters,
			states.PSEUDOCLASS),

		transitions(
			charset.openRoundBracket,
			states.PSEUDOCLASS_ARGUMENTS_OPEN),

		transitions(
			charset.closeRoundBracket,
			states.PSEUDOCLASS_ARGUMENTS_CLOSE),

		transitions(
			charset.whitespace,
			states.WHITESPACE)

	),

	[states.PSEUDOCLASS_ARGUMENTS_OPEN]:  Object.assign(
		{ },

		transitions(
			charset.doubleString,
			states.PSEUDOCLASS_ARGUMENT_STRING_OPEN)

	),

	[states.PSEUDOCLASS_ARGUMENT_STRING_OPEN]: Object.assign(
		{ },

		transitions(
			charset.doubleString,
			states.PSEUDOCLASS_ARGUMENT_STRING_CLOSE),

		transitions(
			charset.anyToken,
			states.PSEUDOCLASS_ARGUMENT_STRING)

	),

	[states.PSEUDOCLASS_ARGUMENT_STRING]: Object.assign(
		{ },

		transitions(
			charset.doubleString,
			states.PSEUDOCLASS_ARGUMENT_STRING_CLOSE),

		transitions(
			charset.anyToken,
			states.PSEUDOCLASS_ARGUMENT_STRING)

	),

	[states.PSEUDOCLASS_ARGUMENT_STRING_CLOSE]: Object.assign(
		{ },

		transitions(
			charset.closeRoundBracket,
			states.PSEUDOCLASS_ARGUMENTS_CLOSE),

		transitions(
			charset.comma,
			states.PSEUDOCLASS_ARGUMENT_SEPERATOR)

	),

	[states.PSEUDOCLASS_ARGUMENTS_CLOSE]: Object.assign(
		{ }
	),

	/*

	*/

	[states.RULE_SEPERATOR]: Object.assign(
		{ },

		transitions(
			charset.whitespace,
			states.WHITESPACE),

		transitions(
			charset.mixedCaseLetters,
			states.TYPE)

	)

}





console.log(grammar)




module.exports = grammar
