
"use strict"



var constants = require('jst/commons/constants')
var states    = require('jst/commons/constants').grammar.tokenStates





var transitions = function ( ) {

	var pairs            = Array.prototype.slice.call(arguments)
	var stateTransitions = pairs.map(pair => {

		var out    = { }

		var keyset = pair[0]
		var state  = pair[1]

		try {
			keyset.forEach(key => out[key] = state)
		} catch (err) {
			throw Error(`${state}: ${err.message}`)
		}

		return out

	})

	return Object.assign.apply([ ], [{ }].concat(stateTransitions))

}





var charset = {
	lowerCaseLetters: 'abcdefghijklmnopqrstuvwxyz',
	upperCaseLetters: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
	mixedCaseLetters: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',

	colon:             ':',
	numbers:           '0123456789',
	whitespace:        ' 	',
	hypen:             '-',
	operators:         '>+=~',

	comma:             ',',

	openBracket:       '[',
	closeBracket:      ']',

	openRoundBracket:  '(',
	closeRoundBracket: ')',

	doubleString:      '"'
}





Object.keys(charset).forEach(key => {
	charset[key] = charset[key].split('')
})

charset.anyToken = [constants.wildcardToken]





var grammar = {

	[states.TYPE]: transitions(

		[charset.mixedCaseLetters, states.TYPE],
		[charset.whitespace,       states.WHITESPACE],
		[charset.colon,            states.PSEUDOCLASS_OPEN],
		[charset.openBracket,      states.ATTRIBUTE_OPEN],
		[charset.comma,            states.RULE_SEPERATOR]

	),
	[states.ATTRIBUTE_OPEN]: transitions(

		[charset.mixedCaseLetters, states.ATTRIBUTE_KEY]

	),

	[states.ATTRIBUTE_KEY]: transitions(

		[charset.mixedCaseLetters, states.ATTRIBUTE_KEY],
		[charset.operators,        states.OPERATOR]

	),

	[states.OPERATOR]: transitions(

		[charset.whitespace,       states.WHITESPACE],
		[charset.mixedCaseLetters, states.TYPE],
		[charset.doubleString,     states.STRING_OPEN]

	),

	[states.STRING_OPEN]: transitions(

		[charset.doubleString, states.STRING_CLOSE],
		[charset.anyToken,     states.STRING]

	),

	[states.STRING]: transitions(

		[charset.doubleString, states.STRING_CLOSE],
		[charset.anyToken,     states.STRING]

	),

	[states.STRING_CLOSE]: transitions(

		[charset.closeBracket,      states.ATTRIBUTE_CLOSE],
		[charset.closeRoundBracket, states.PSEUDOCLASS_ARGUMENTS_CLOSE],
		[charset.comma,             states.PSEUDOCLASS_ARGUMENT_SEPERATOR]

	),

	[states.ATTRIBUTE_CLOSE]: transitions(
		[charset.comma, states.RULE_SEPERATOR]
	),

	[states.PSEUDOCLASS_OPEN]: transitions(

		[charset.mixedCaseLetters, states.PSEUDOCLASS]

	),

	[states.PSEUDOCLASS]: transitions(

		[charset.mixedCaseLetters, states.PSEUDOCLASS],
		[charset.hypen,            states.PSEUDOCLASS],
		[charset.openRoundBracket, states.PSEUDOCLASS_ARGUMENTS_OPEN],
		[charset.whitespace,       states.WHITESPACE]

	),

	[states.PSEUDOCLASS_ARGUMENTS_OPEN]:  transitions(

		[charset.doubleString, states.STRING_OPEN]

	),

	[states.PSEUDOCLASS_ARGUMENT_SEPERATOR]: transitions(

		[charset.whitespace, states.WHITESPACE]

	),

	[states.PSEUDOCLASS_ARGUMENTS_CLOSE]: transitions(

		[charset.whitespace, states.WHITESPACE],
		[charset.comma,      states.RULE_SEPERATOR]

	),

	[states.RULE_SEPERATOR]: transitions(

		[charset.whitespace,       states.WHITESPACE],
		[charset.mixedCaseLetters, states.TYPE]

	),

	[states.WHITESPACE]: transitions(

		[charset.whitespace,       states.WHITESPACE],
		[charset.mixedCaseLetters, states.TYPE],
		[charset.operators,        states.OPERATOR],
		[charset.doubleString,     states.STRING_OPEN]

	)

}




module.exports = grammar
