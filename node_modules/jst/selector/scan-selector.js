
"use strict"




var selectorGrammar = require('jst/selector/selector-grammar')





var tokeniseCFGrammar = (grammar, chars) => {

	var tokens = [ ]
	var state  = 'WHITESPACE'

	for (var ith = 0; ith < chars.length; ++ith) {

		var char = chars.charAt(ith)

		if (!grammar.hasOwnProperty(state)) {
			throw Error(`"${state}" is not a state in the grammar ${Object.keys(grammar)}`)
		}

		if (grammar[state].hasOwnProperty(char)) {

			state = grammar[state][char]

		} else if (grammar[state].hasOwnProperty('__DEFAULT__')) {

			state = grammar[state]['__DEFAULT__']

		} else {

			var message =
				'no transition from state for "' + char + '"\n' +
				'slice: ' + chars.slice(0, ith + 1) + '\n' +
				'input: ' + chars + '\n'

			throw Error(message)

		}

		tokens.push({char, state})

	}

	return tokens

}




var tokeniseSelector = selector => {
	return tokeniseCFGrammar(selectorGrammar, selector)
}





module.exports = tokeniseSelector
