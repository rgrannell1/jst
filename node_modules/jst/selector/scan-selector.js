
"use strict"






var constants    = require('jst/commons/constants')
var states       = constants.grammar.tokenStates

var tokenGrammar = require('jst/selector/token-grammar')





var tokeniseCFGrammar = (grammar, state, chars) => {

	var tokens = [ ]

	for (var ith = 0; ith < chars.length; ++ith) {

		var char = chars.charAt(ith)

		if (!grammar.hasOwnProperty(state)) {
			throw Error(`"${state}" is not a state in the grammar ${Object.keys(grammar)}`)
		}

		if (grammar[state].hasOwnProperty(char)) {

			state = grammar[state][char]

		} else if (grammar[state].hasOwnProperty(constants.wildcardToken)) {

			state = grammar[state][constants.wildcardToken]

		} else {

			var message =
				'no transition from state for "' + char + '"\n' +
				'slice: ' + chars.slice(0, ith + 1) + '\n' +
				'input: ' + chars + '\n' +
				'state: ' + state + '\n'

			throw Error(message)

		}

		tokens.push({char, state})

	}

	return tokens

}




var tokeniseSelector = tokeniseCFGrammar.bind({ }, tokenGrammar, states.WHITESPACE)





module.exports = tokeniseSelector
