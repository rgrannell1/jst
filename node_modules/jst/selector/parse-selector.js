
"use strict"




var constants        = require('jst/commons/constants')

var states           = constants.states
var tokeniseSelector = require('jst/selector/scan-selector')
var groupTokens      = require('jst/selector/group-tokens')
var filterStates     = require('jst/selector/filter-states')





var translate = { }




translate.splitRules = tokens => {

	return tokens.reduce((acc, token) => {

		if (token.state === states.RULE_SEPERATOR) {
			acc.push([ ])
		} else {
			acc[acc.length - 1].push(token)
		}

		return acc

	}, [[ ]])

}





translate.checkTypes = tokens => {

	tokens.forEach(token => {

		if (token.state === states.TYPE) {

			if (!constants.grammarEnums.typeMapping.hasOwnProperty(token.char)) {
				throw Error(`selector contains invalid type "${token.char}"`)
			}

		}

	})

	return tokens

}

translate.checkPsuedoclass = tokens => {

	tokens.forEach(token => {

		if (token.state === states.PSEUDOCLASS) {

			if (constants.grammarEnums.psuedoClasses.indexOf(token.char) === -1) {
				throw Error(`selector contains invalid pseudoclass "${token.char}"`)
			}

		}

	})

	return tokens

}

translate.checkEnums = tokens => {
	return translate.checkPsuedoclass(translate.checkTypes(tokens))
}





var parseSelector = selector => {

	var tokens       = tokeniseSelector(selector)
	var unusedStates = [
		states.WHITESPACE,
		states.PSEUDOCLASS_OPEN,
		states.PSEUDOCLASS_ARGUMENTS_OPEN,
		states.PSEUDOCLASS_ARGUMENT_SEPERATOR,
		states.PSEUDOCLASS_ARGUMENTS_CLOSE,
		states.ATTRIBUTE_OPEN,
		states.ATTRIBUTE_KEY,
		states.STRING_OPEN,
		states.STRING_CLOSE,
		states.ATTRIBUTE_CLOSE
	]

	var filtered = filterStates(groupTokens(tokens), unusedStates)

	translate.splitRules(translate.checkEnums(filtered))


}




module.exports = parseSelector
